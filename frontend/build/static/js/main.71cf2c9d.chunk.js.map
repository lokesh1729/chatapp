{"version":3,"sources":["actions/error.actions.js","actions/action.utils.js","actions/types.js","components/Login/login.js","actions/login.actions.js","components/common/Alerts.js","reducers/login.reducer.js","reducers/error.reducer.js","reducers/message.reducer.js","reducers/index.js","store/index.js","components/common/Spinner.js","components/Home/home.js","components/RoomEnter/RoomEnter.js","constants.js","components/common/AuthLayer.js","utils.js","actions/message.actions.js","components/Room/Room.js","components/Signup/signup.js","actions/signup.actions.js","components/P2P/p2p.js","App.js","serviceWorker.js","index.js"],"names":["createErrors","msg_type","msg","status","type","payload","createMessages","makeHttpCall","url","body","successMsg","action_type","dispatch","axios","post","headers","Content-Type","then","response","data","loginSuccess","catch","err","statusText","message","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submitLogin","e","preventDefault","login","state","username","password","onChange","setState","defineProperty","target","name","value","isAuthenticated","currentUser","next","queryString","parse","location","search","react_default","a","createElement","react","react_router","to","bloomer_min","className","isLoading","onSubmit","placeholder","required","isColor","Component","connect","JSON","stringify","Alerts","prevProps","_prevState","_this$props","errors","alert","messages","error","concat","join","email","non_field_errors","emptyMessage","genericError","success","genericMessage","withAlert","Cookies","require","initialState","get","localStorage","getItem","signupSuccess","loginSignupReducer","arguments","length","undefined","action","token","set","path","expires","Date","expiry","setItem","user","objectSpread","errorReducer","messageReducer","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","apply","Spinner","src","alt","Home","RoomEnter","enterRoom","event","history","push","roomName","roomNameChange","val","_","keyDownHandler","keyCode","Section","Container","Label","Input","onKeyDown","Button","onClick","BASE_NAME","authRequired","WrappedComponent","innerClass","_React$Component","inherits","createClass","key","encodeURIComponent","pathname","split","React","withCookies","message_type","Room","sendMessage","socket","send","room_name","match","params","chatLog","users","cookies","protocolPrefix","window","protocol","host","WebSocket","self","onopen","console","log","onmessage","prevState","toConsumableArray","filter","onerror","onclose","Authorization","res","result","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","created","return","statusMessage","_this2","chatlog","map","data-tooltip","last_seen","Field","TextArea","isSize","Control","Signup","submitSignup","password2","formErrors","passwordMismatch","signup","first_name","last_name","security_question1","security_answer1","security_question2","security_answer2","isSignupSuccess","isPasswordMismatched","P2P","peerName","peer","from","entries","options","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","WrappedSignup","common_Spinner","common_Alerts","Signup_signup","WrappedLogin","Login_login","WrappedRoom","components_Room_Room","WrappedP2P","p2p","App","es","es6","react_alert","assign","template","AlertTemplate","react_router_dom","basename","exact","component","Boolean","hostname","Raven","config","process","REACT_APP_SENTRY_URL","install","rootElement","document","getElementById","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAAaA,EAAe,SAACC,EAAUC,EAAKC,GACxC,MAAO,CAAEC,KAAMH,EAAUI,QAAS,CAAEH,MAAKC,YAGhCG,EAAiB,SAACL,EAAUC,GACrC,MAAO,CAAEE,KAAMH,EAAUI,QAAS,CAAEH,SCD3BK,EAAe,SAACC,EAAKC,EAAMC,EAAYC,EAAaC,GAM/DC,IACOC,KAAKN,EAAKC,EANF,CACTM,QAAS,CACLC,eAAgB,sBAKnBC,KAAK,SAACC,GAEHN,EAAS,CACLR,KCVmB,wBDYvBQ,EAAS,CACLR,KAAMO,EACNN,QAASa,EAASC,OAEtBP,EACIN,ECnBO,UDmBuB,CAC1Bc,aAAcV,OAIzBW,MAAM,SAACC,GAIJ,OAHAV,EAAS,CACLR,KCxBmB,wBD0BpBkB,EAAIJ,SACIN,EACLZ,EC/BG,QDiCDsB,EAAIJ,SAASC,KACbG,EAAIJ,SAASf,SAIlBmB,EAAInB,QAAUmB,EAAIC,WACZX,EACDZ,ECxCC,QDwCyBsB,EAAIC,WAAYD,EAAInB,SAG/CS,EAASZ,EC3CP,QD2CiCsB,EAAIE,QAAS,wBE7B7DC,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAsBVQ,YAAc,SAACC,GACXA,EAAEC,iBACFT,EAAKD,MAAMW,MAAMV,EAAKW,MAAMC,SAAUZ,EAAKW,MAAME,WAzBlCb,EA4BnBc,SAAW,SAACN,GACRR,EAAKe,SAALd,OAAAe,EAAA,EAAAf,CAAA,GAAiBO,EAAES,OAAOC,KAAOV,EAAES,OAAOE,SA3B1CnB,EAAKW,MAAQ,CACTC,SAAU,GACVC,SAAU,IAJCb,wEAiCf,IAAMoB,EAAkBjB,KAAKJ,MAAMY,MAAMS,iBAAmBjB,KAAKJ,MAAMY,MAAMU,YAEvEC,EADcC,IAAYC,MAAMrB,KAAKJ,MAAM0B,SAASC,QACjCJ,KACzB,OACIK,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACKV,EACGO,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAUC,GAAIV,IAEdK,EAAAC,EAAAC,cAACI,EAAA,QAAD,CACIC,UACI/B,KAAKJ,MAAMY,MAAMwB,UAAY,aAAe,IAGhDR,EAAAC,EAAAC,cAACI,EAAA,UAAD,KACIN,EAAAC,EAAAC,cAAA,QAAMO,SAAUjC,KAAKI,aACjBoB,EAAAC,EAAAC,cAACI,EAAA,MAAD,KACIN,EAAAC,EAAAC,cAACI,EAAA,MAAD,iBACAN,EAAAC,EAAAC,cAACI,EAAA,QAAD,KACIN,EAAAC,EAAAC,cAACI,EAAA,MAAD,CACIxD,KAAK,OACLqC,SAAUX,KAAKW,SACfI,KAAK,WACLmB,YAAY,iBACZC,UAAU,MAItBX,EAAAC,EAAAC,cAACI,EAAA,MAAD,KACIN,EAAAC,EAAAC,cAACI,EAAA,MAAD,iBACAN,EAAAC,EAAAC,cAACI,EAAA,QAAD,KACIN,EAAAC,EAAAC,cAACI,EAAA,MAAD,CACIxD,KAAK,WACLqC,SAAUX,KAAKW,SACfI,KAAK,WACLmB,YAAY,iBACZC,UAAU,MAItBX,EAAAC,EAAAC,cAACI,EAAA,MAAD,KACIN,EAAAC,EAAAC,cAACI,EAAA,QAAD,KACIN,EAAAC,EAAAC,cAACI,EAAA,OAAD,CAAQM,QAAQ,OAAO9D,KAAK,UAA5B,uBA3EpB+D,aAgGLC,cAHS,SAAC9B,GAAD,MAAY,CAChCA,MAAOA,EAAMD,QAIb,CAAEA,MC/Ge,SAACE,EAAUC,GAAX,OAAwB,SAAC5B,GAC1C,IAAMH,EAAO4D,KAAKC,UAAU,CAAE/B,WAAUC,aACxC5B,EAAS,CACLR,KFF2B,wBEI/BG,EAAa,mBAAoBE,EAAM,yBFRtB,QEQ6DG,MDwGnEwD,CAGb3C,mBE9GI8C,qMACiBC,EAAWC,GAAY,IAAAC,EACF5C,KAAKJ,MAAjCiD,EAD8BD,EAC9BC,OAAQC,EADsBF,EACtBE,MAAOC,EADeH,EACfG,SACnBF,IAAWH,EAAUG,SACjBA,EAAOzE,IAAI2C,MAAM+B,EAAME,MAAN,SAAAC,OAAqBJ,EAAOzE,IAAI2C,KAAKmC,SACtDL,EAAOzE,IAAI+E,OACXL,EAAME,MAAN,GAAAC,OACOJ,EAAOxE,OADd,cAAA4E,OACiCJ,EAAOzE,IAAI+E,MAAMD,SAElDL,EAAOzE,IAAIgF,kBACXN,EAAME,MAAN,GAAAC,OACOJ,EAAOxE,OADd,OAAA4E,OAC0BJ,EAAOzE,IAAIgF,iBAAiBF,SAEtDL,EAAOzE,IAAIqC,UAAUqC,EAAME,MAAMH,EAAOzE,IAAIqC,SAASyC,QACtDL,EAAOzE,IAAIiF,cAAcP,EAAME,MAAMH,EAAOzE,IAAIiF,cAChDR,EAAOzE,IAAIkF,cAAcR,EAAME,MAAN,GAAAC,OAAeJ,EAAOzE,IAAIkF,gBAEtDP,IAAaL,EAAUK,WACnBA,EAAS3E,IAAIkB,cACbwD,EAAMS,QAAQR,EAAS3E,IAAIkB,cAE5ByD,EAAS3E,IAAIoF,gBACZV,EAAMS,QAAQR,EAAS3E,IAAIoF,kDAMnC,OAAOhC,EAAAC,EAAAC,cAACC,EAAA,SAAD,aA5BMU,cAyCNC,cATS,SAAC9B,GAAD,MAAY,CAChCqC,OAAQrC,EAAMqC,OACdE,SAAUvC,EAAMuC,WAOLT,CAAyBmB,cAAYhB,4CC7C9CiB,EAAUC,EAAQ,KAElBC,EAAe,CACjB3C,kBAAmByC,EAAQG,IAAI,aAC/B3C,YAAaqB,KAAKlB,MAAMyC,aAAaC,QAAQ,gBAC7C/B,WAAW,EACXgC,eAAe,GAiCJC,EA9BY,WAAuC,IAA9BzD,EAA8B0D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBN,EAAcS,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9D,OAAQC,EAAO/F,MACX,IJZa,QIaT,IAAIgG,EAAQD,EAAO9F,QAAQ+F,MAG3B,OAFAZ,EAAQa,IAAI,YAAaD,EAAO,CAACE,KAAM,IAAKC,QAAS,IAAIC,KAAKL,EAAO9F,QAAQoG,UAC7Eb,aAAac,QAAQ,cAAerC,KAAKC,UAAU6B,EAAO9F,QAAQsG,OAC3D/E,OAAAgF,EAAA,EAAAhF,CAAA,GACAU,EADP,CAEIS,iBAAiB,EACjBC,YAAamD,EAAO9F,QAAQsG,OAEpC,IJpBc,SIqBV,OAAO/E,OAAAgF,EAAA,EAAAhF,CAAA,GACAU,EADP,CAEIwD,eAAgBxD,EAAMwD,gBAE9B,IJtB2B,sBIuBvB,OAAOlE,OAAAgF,EAAA,EAAAhF,CAAA,GACAU,EADP,CAEIwB,WAAW,IAEnB,IJ1B2B,sBI2BvB,OAAOlC,OAAAgF,EAAA,EAAAhF,CAAA,GACAU,EADP,CAEIwB,WAAW,IAEnB,QACI,OAAOxB,ICnCboD,EAAe,CACjBxF,IAAK,GACLC,OAAQ,IAQG0G,EANM,WAAkC,IAAjCvE,EAAiC0D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBN,EAAcS,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnD,MLLiB,UKKbC,EAAO/F,KACA,CAAEF,IAAKiG,EAAO9F,QAAQH,IAAKC,OAAQgG,EAAO9F,QAAQF,QAEtDmC,GCRLoD,EAAe,CACjBxF,IAAK,IAQM4G,EANQ,WAAkC,IAAjCxE,EAAiC0D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBN,EAAcS,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACrD,MNHmB,YMGfC,EAAO/F,KACS+F,EAAO9F,QAEpBiC,GCJIyE,4BAAgB,CAAE1E,QAAOsC,SAAQE,aCA1CmC,EAAa,CAACC,KASLC,EANDC,sBACVC,EAFiB,GAIjBC,8BAAoBC,kBAAeC,WAAf,EAAmBP,KCPrCQ,mLAEE,OACIlE,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACK3B,KAAKJ,MAAMoC,WACRR,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WACXP,EAAAC,EAAAC,cAAA,OAAKiE,IAAI,qBAAqBC,IAAI,qBANpCvD,aAsBPC,cAJS,SAAC9B,GAAD,MAAY,CAChCwB,UAAWxB,EAAMD,MAAMyB,YAGZM,CAAyBoD,WCXzBG,mLAJP,OAAOrE,EAAAC,EAAAC,cAAA,+BATIW,8DCiDJyD,cA1Cb,SAAAA,EAAYlG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8F,IACjBjG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgG,GAAA3F,KAAAH,KAAMJ,KAMRmG,UAAY,SAAAC,GACVA,EAAM1F,iBACNT,EAAKD,MAAMqG,QAAQC,KAAK,SAAWrG,EAAKW,MAAM2F,WAT7BtG,EAYnBuG,eAAiB,SAAAJ,GACf,IAAIK,EAAML,EAAMlF,OAAOE,MACvBnB,EAAKe,SAAS,SAAA0F,GAAC,MAAK,CAAEH,SAAUE,MAdfxG,EAiBnB0G,eAAiB,SAAAP,GACO,KAAlBA,EAAMQ,SACR3G,EAAKkG,UAAUC,IAjBjBnG,EAAKW,MAAQ,CACX2F,SAAU,IAHKtG,wEAwBjB,OACE2B,EAAAC,EAAAC,cAAC+E,EAAA,QAAD,CAAS1E,UAAU,uBACjBP,EAAAC,EAAAC,cAACgF,EAAA,UAAD,CAAW3E,UAAU,mBACnBP,EAAAC,EAAAC,cAACiF,EAAA,MAAD,CAAO5E,UAAU,eAAjB,sBACAP,EAAAC,EAAAC,cAACkF,EAAA,MAAD,CACEtI,KAAM,OACNyD,UAAU,cACVpB,SAAUX,KAAKoG,eACfS,UAAW7G,KAAKuG,iBAElB/E,EAAAC,EAAAC,cAACoF,EAAA,OAAD,CAAQ1E,QAAS,UAAWL,UAAU,aAAagF,QAAS/G,KAAK+F,WAAjE,kBAnCc1D,sBCRX2E,GAAY,OCOV,SAASC,GAAaC,GACjC,IAAMC,EAAU,SAAAC,GAAA,SAAAD,IAAA,OAAArH,OAAAC,EAAA,EAAAD,CAAAE,KAAAmH,GAAArH,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqH,GAAA1B,MAAAzF,KAAAkE,YAAA,OAAApE,OAAAuH,EAAA,EAAAvH,CAAAqH,EAAAC,GAAAtH,OAAAwH,EAAA,EAAAxH,CAAAqH,EAAA,EAAAI,IAAA,SAAAvG,MAAA,WAKR,ICPiBtC,EDOXuC,EAAkBjB,KAAKJ,MAAMY,MAAMS,iBAAmBjB,KAAKJ,MAAMY,MAAMU,YAC7E,OACIM,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACMV,EAGEO,EAAAC,EAAAC,cAACwF,EAAqBlH,KAAKJ,OAF3B4B,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAUC,GAAE,eAAAoB,OAAiBuE,oBCXxB9I,EDWwDsB,KAAKJ,MAAM0B,SAASmG,SAAWzH,KAAKJ,MAAM0B,SAASC,OCV/H7C,EAAIgJ,MAAMV,IAAW9D,KAAK,cDCfiE,EAAA,CAAiBQ,IAAMtF,WAqBvC,OAAOC,YAHiB,SAAC9B,GAAD,MAAY,CAChCA,MAAOA,EAAMD,QAIb,KAFG+B,CAGLsF,YAAYT,4CE5BLrE,GAAQ,SAAC+E,EAAcnI,GAAf,IAAwBrB,EAAxB6F,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA+B,GAA/B,OAAsC,SAACpF,GfFvC,UeGd+I,GACD/I,EAASZ,EfJM,QeIoBwB,EAASrB,IAE9CS,EAASN,EfLU,UeKoBkB,MCMrCoI,eACJ,SAAAA,EAAYlI,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8H,IACjBjI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgI,GAAA3H,KAAAH,KAAMJ,KA+ERmI,YAAc,SAAA1H,GACZA,EAAEC,iBACGT,EAAKW,MAAMd,SAIhBG,EAAKW,MAAMwH,OAAOC,KAChB1F,KAAKC,UAAU,CAAE9C,QAASG,EAAKW,MAAMd,QAASwI,UAAWrI,EAAKW,MAAM2F,YAEtEtG,EAAKe,SAAS,SAAA0F,GAAC,MAAK,CAAE5G,QAAS,OAN7BG,EAAKD,MAAMkD,MAAM,QAAS,CAAEO,aAAc,4BAnF3BxD,EA4FnB0G,eAAiB,SAAAP,GACO,KAAlBA,EAAMQ,SACR3G,EAAKkI,YAAY/B,IA5FnB,IAAMG,EAAWtG,EAAKD,MAAMuI,MAAMC,OAAOjC,SAFxB,OAGjBtG,EAAKW,MAAQ,CACXwH,OAAQ,KACRK,QAAS,GACT3I,QAAS,GACTyG,SAAUA,EACVmC,MAAO,IARQzI,mFAYjB,IAAMyE,EAAQtE,KAAKJ,MAAM2I,QAAQ1E,IAAI,aAC/B2E,EAA8C,WAA7BC,OAAOnH,SAASoH,SAAwB,OAAS,MAClEC,EAASF,OAAOnH,SAAhBqH,KACFX,EAAS,IAAIY,UAAJ,GAAA3F,OAAiBuF,EAAjB,MAAAvF,OAAoC0F,EAApC,aAAA1F,OAAoDjD,KAAKQ,MAAM2F,SAA/D,MACT0C,EAAO7I,KACXgI,EAAOc,OAAS,SAAAzI,GACd0I,QAAQC,IAAI,yBAEdhB,EAAOiB,UAAY,SAAwB5I,GAEzC,IAAIhB,EAAOkD,KAAKlB,MAAMhB,EAAEhB,MACxB,GAAkB,mBAAdA,EAAKf,KACPuK,EAAKjI,SAAS,CACZ0H,MAAOjJ,EAAKA,YAET,GAAkB,YAAdA,EAAKf,KACduK,EAAKjI,SAAS,SAAAsI,GAAS,MAAK,CAC1Bb,QAAO,GAAApF,OAAAnD,OAAAqJ,GAAA,EAAArJ,CAAMoJ,EAAUb,SAAhB,CAAyBhJ,EAAKA,eAElC,GAAkB,WAAdA,EAAKf,MACd,GAAIe,EAAKA,KAAKoB,WAAaoI,EAAKjJ,MAAMY,MAAMU,YAAYT,SAAU,CAChE,IAAI6H,EAAQO,EAAKrI,MAAM8H,OACvBA,EAAQA,EAAMc,OAAO,SAAA/C,GAAG,OAAIA,EAAI5F,WAAapB,EAAKA,KAAKoB,YACjDyF,KAAK7G,EAAKA,MAChBwJ,EAAKjI,SAAS,CAAE0H,gBAEb,GAAkB,YAAdjJ,EAAKf,MACVe,EAAKA,KAAKoB,WAAaoI,EAAKjJ,MAAMY,MAAMU,YAAYT,SAAU,CAChE,IAAI6H,EAAQO,EAAKrI,MAAM8H,MACvBA,EAAQA,EAAMc,OAAO,SAAA/C,GAAG,OAAIA,EAAI5F,WAAapB,EAAKA,KAAKoB,WACvDoI,EAAKjI,SAAS,CAAE0H,YAItBN,EAAOqB,QAAU,SAAA7J,GACfuJ,QAAQC,IAAR,0CACAD,QAAQ/F,MAAMxD,IAEhBwI,EAAOsB,QAAU,SAAAjJ,GACf0I,QAAQC,IAAI,0BAEdhJ,KAAKY,SAAS,CAAEoH,WAChBjJ,IACG8E,IADH,qBAAAZ,OAC4BjD,KAAKQ,MAAM2F,SADvC,KACoD,CAChDlH,QAAS,CAAEsK,cAAa,SAAAtG,OAAWqB,MAEpCnF,KAAK,SAAAqK,GACJ,IAAMC,EAAS,GADJC,GAAA,EAAAC,GAAA,EAAAC,OAAAxF,EAAA,IAEX,QAAAyF,EAAAC,EAAgBN,EAAInK,KAApB0K,OAAAC,cAAAN,GAAAG,EAAAC,EAAA3I,QAAA8I,MAAAP,GAAA,EAA0B,KAAjBrD,EAAiBwD,EAAA7I,MACxByI,EAAOvD,KAAK,CACVqB,IAAKlB,EAAG,GACR3G,QAAS2G,EAAG,KACZ5F,SAAU4F,EAAG,YACb6D,QAAS7D,EAAG,cAPL,MAAA7G,GAAAmK,GAAA,EAAAC,EAAApK,EAAA,YAAAkK,GAAA,MAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GAUXf,EAAKjI,SAAS,SAAAsI,GAAS,MAAK,CAC1Bb,QAAO,GAAApF,OAAAnD,OAAAqJ,GAAA,EAAArJ,CAAMoJ,EAAUb,SAAYoB,QAGtClK,MAAM,SAAAC,GAEDA,EAAIJ,UAAoC,MAAxBI,EAAIJ,SAASf,QAC/B0K,QAAQC,IAAIxJ,EAAIJ,SAASK,WAAYD,EAAIJ,SAASgL,kDAuBjD,IAAAC,EAAArK,KACDsK,EAAUtK,KAAKQ,MAAM6H,QAC3B,OACE7G,EAAAC,EAAAC,cAAC+E,EAAA,QAAD,CAAS1E,UAAU,0BACjBP,EAAAC,EAAAC,cAACgF,EAAA,UAAD,CAAW3E,UAAU,UACnBP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,wBACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,yGAAf,eACe/B,KAAKJ,MAAMuI,MAAMC,OAAOjC,UAEvC3E,EAAAC,EAAAC,cAAA,OAAKK,UAAU,6GACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,2GACZuI,EAAQC,IAAI,SAAA7K,GAAO,OAClB8B,EAAAC,EAAAC,cAAA,OAAK6F,IAAK7H,EAAQ6H,IAAKxF,UAAU,OAC/BP,EAAAC,EAAAC,cAAA,QAAMK,UAAU,sCACbrC,EAAQe,WAAa4J,EAAKzK,MAAMY,MAAMU,YAAYT,SAC/C,MACAf,EAAQe,SAAU,IAHxB,IAII,KAEJe,EAAAC,EAAAC,cAAA,QAAMK,UAAU,gCAAgCrC,EAAQA,aAI9D8B,EAAAC,EAAAC,cAAA,OAAKK,UAAU,4CACbP,EAAAC,EAAAC,cAAA,QAAMK,UAAU,gCAAhB,gBACAP,EAAAC,EAAAC,cAAA,UACG1B,KAAKQ,MAAM8H,MAAMiC,IAAI,SAAA1F,GAAI,OACxBrD,EAAAC,EAAAC,cAAA,OAAK6F,IAAK1C,EAAKpE,SAAUsB,UAAW,QAClCP,EAAAC,EAAAC,cAAA,QACEK,UACE,mCACiB,YAAhB8C,EAAKxG,OAAuB,aAAe,kBAGhDmD,EAAAC,EAAAC,cAAA,MACEK,UAAU,oDACVyI,eAAA,gBAAAvH,OAA8B4B,EAAK4F,YAElC5F,EAAKpE,gBAOlBe,EAAAC,EAAAC,cAACgF,EAAA,UAAD,CAAW3E,UAAU,QACnBP,EAAAC,EAAAC,cAACgJ,GAAA,MAAD,KACElJ,EAAAC,EAAAC,cAACiJ,GAAA,SAAD,CACEC,OAAQ,SACR1I,YAAY,gBACZvB,SAAU,SAAAN,GACR,IAAIgG,EAAMhG,EAAES,OAAOE,MACnBqJ,EAAKzJ,SAAS,SAAA0F,GAAC,MAAK,CAClB5G,QAAS2G,MAGbQ,UAAW7G,KAAKuG,eAChBxE,UAAU,6IACVf,MAAOhB,KAAKQ,MAAMd,WAGtB8B,EAAAC,EAAAC,cAACgJ,GAAA,MAAD,KACElJ,EAAAC,EAAAC,cAACmJ,GAAA,QAAD,KACErJ,EAAAC,EAAAC,cAACoF,EAAA,OAAD,CAAQ1E,QAAQ,UAAU2E,QAAS/G,KAAK+H,aACtCvG,EAAAC,EAAAC,cAAA,QAAMK,UAAU,iBAAhB,0BAnKDM,aAmLJC,eACb,KACA,CAAEQ,UAFWR,CAGb2E,GAAaa,KC7LTgD,eACJ,SAAAA,EAAYlL,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8K,IACjBjL,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgL,GAAA3K,KAAAH,KAAMJ,KAeRe,SAAW,SAACN,GACVR,EAAKe,SAALd,OAAAe,EAAA,EAAAf,CAAA,GAAiBO,EAAES,OAAOC,KAAOV,EAAES,OAAOE,SAjBzBnB,EAoBnBkL,aAAe,SAAC1K,GAEd,OADAA,EAAEC,iBACET,EAAKW,MAAME,WAAab,EAAKW,MAAMwK,UAC9BnL,EAAKe,SAAS,CAAEqK,WAAY,CAAEC,iBAAkB,8CAElDrL,EAAKD,MAAMuL,OAAOtL,EAAKW,MAAMC,SAAUZ,EAAKW,MAAME,SAAUb,EAAKW,MAAM4K,WAC5EvL,EAAKW,MAAM6K,UAAWxL,EAAKW,MAAM8K,mBAAoBzL,EAAKW,MAAM+K,iBAAkB1L,EAAKW,MAAMgL,mBAAoB3L,EAAKW,MAAMiL,mBAxB9H5L,EAAKW,MAAQ,CACXC,SAAU,GACVC,SAAU,GACVsK,UAAW,GACXI,WAAY,GACZC,UAAW,GACXC,mBAAoB,GACpBE,mBAAoB,GACpBD,iBAAkB,GAClBE,iBAAkB,GAClBR,WAAY,IAZGpL,wEA+BjB,IAAM6L,EAAkB1L,KAAKJ,MAAMY,MAAMwD,cACnC/C,EAAkBjB,KAAKJ,MAAMY,MAAMS,gBACnC0K,EAAuB,qBAAsB3L,KAAKQ,MAAMyK,WAC9D,OAAGhK,EACQO,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAUC,GAAI,MAGvBL,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACG+J,EAAmBlK,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAUC,GAAI,YAChCL,EAAAC,EAAAC,cAACI,EAAA,QAAD,CACEC,UACE/B,KAAKJ,MAAMY,MAAMwB,UAAY,aAAe,IAE9CR,EAAAC,EAAAC,cAAA,QAAMO,SAAUjC,KAAK+K,cACnBvJ,EAAAC,EAAAC,cAACI,EAAA,MAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,iBACAN,EAAAC,EAAAC,cAACI,EAAA,QAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,CACExD,KAAK,OACLqC,SAAUX,KAAKW,SACfI,KAAK,WACLmB,YAAY,iBACZC,UAAU,MAIhBX,EAAAC,EAAAC,cAACI,EAAA,MAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,iBACAN,EAAAC,EAAAC,cAACI,EAAA,QAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,CACExD,KAAK,WACLqC,SAAUX,KAAKW,SACfI,KAAK,WACLmB,YAAY,iBACZC,UAAU,MAIhBX,EAAAC,EAAAC,cAACI,EAAA,MAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,yBACAN,EAAAC,EAAAC,cAACI,EAAA,QAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,CACExD,KAAK,WACLqC,SAAUX,KAAKW,SACfI,KAAK,YACLmB,YAAY,oBACZC,UAAU,EACVC,QAASuJ,EAAuB,SAAW,MAG/CnK,EAAAC,EAAAC,cAACI,EAAA,KAAD,CAAMC,UAAW4J,EAAuB,QAAU,SAC5CvJ,QAASuJ,EAAuB,SAAW,IADjD,6CAIFnK,EAAAC,EAAAC,cAACI,EAAA,MAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,mBACAN,EAAAC,EAAAC,cAACI,EAAA,QAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,CACExD,KAAK,OACLqC,SAAUX,KAAKW,SACfI,KAAK,aACLmB,YAAY,mBACZC,UAAU,MAIhBX,EAAAC,EAAAC,cAACI,EAAA,MAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,kBACAN,EAAAC,EAAAC,cAACI,EAAA,QAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,CACExD,KAAK,OACLqC,SAAUX,KAAKW,SACfI,KAAK,YACLmB,YAAY,kBACZC,UAAU,MAIhBX,EAAAC,EAAAC,cAACI,EAAA,MAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,4BACAN,EAAAC,EAAAC,cAACI,EAAA,QAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,CACExD,KAAK,OACLqC,SAAUX,KAAKW,SACfI,KAAK,qBACLmB,YAAY,0BACZC,UAAU,KAGdX,EAAAC,EAAAC,cAACI,EAAA,KAAD,CAAMM,QAAS,QAAf,4GAIFZ,EAAAC,EAAAC,cAACI,EAAA,MAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,0BACAN,EAAAC,EAAAC,cAACI,EAAA,QAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,CACExD,KAAK,OACLqC,SAAUX,KAAKW,SACfI,KAAK,mBACLmB,YAAY,eACZC,UAAU,MAIhBX,EAAAC,EAAAC,cAACI,EAAA,MAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,4BACAN,EAAAC,EAAAC,cAACI,EAAA,QAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,CACExD,KAAK,OACLqC,SAAUX,KAAKW,SACfI,KAAK,qBACLmB,YAAY,0BACZC,UAAU,MAIhBX,EAAAC,EAAAC,cAACI,EAAA,MAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,0BACAN,EAAAC,EAAAC,cAACI,EAAA,QAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,MAAD,CACExD,KAAK,OACLqC,SAAUX,KAAKW,SACfI,KAAK,mBACLmB,YAAY,eACZC,UAAU,MAIhBX,EAAAC,EAAAC,cAACI,EAAA,MAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,QAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,OAAD,CAAQM,QAAQ,OAAO9D,KAAK,UAA5B,sBAnKG+D,aAyLNC,eAJS,SAAC9B,GAAD,MAAY,CAClCA,MAAOA,EAAMD,QAGyB,CAAE4K,OC7LpB,SAAC1K,EAAUC,EAAU0K,EAAYC,EAAWC,EAAoBC,EAAkBC,EAAoBC,GAAtG,OAA2H,SAAC3M,GAChJ,IAAMH,EAAO4D,KAAKC,UAAU,CAC1B/B,WACAC,WACA0K,aACAC,YACAC,qBACAC,mBACAC,qBACAC,qBAEF3M,EAAS,CACHR,KlBX2B,wBkBajCG,EAAa,sBAAuBE,EAAM,sClBhBtB,SkBgB2EG,MD+KlFwD,CAAqCwI,IEnL9Cc,eACJ,SAAAA,EAAYhM,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4L,IACjB/L,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8L,GAAAzL,KAAAH,KAAMJ,KAmFRmI,YAAc,SAAA1H,GACZA,EAAEC,iBACGT,EAAKW,MAAMd,SAIhBG,EAAKW,MAAMwH,OAAOC,KAChB1F,KAAKC,UAAU,CACb9C,QAASG,EAAKW,MAAMd,QACpBmC,GAAIhC,EAAKW,MAAMqL,YAGnBhM,EAAKe,SAAS,SAAA0F,GAAC,MAAK,CAAE5G,QAAS,OAT7BG,EAAKD,MAAMkD,MAAM,QAAS,CAAEO,aAAc,4BAvF3BxD,EAmGnB0G,eAAiB,SAAAP,GACO,KAAlBA,EAAMQ,SACR3G,EAAKkI,YAAY/B,IAnGnB,IAAM6F,EAAWhM,EAAKD,MAAMuI,MAAMC,OAAOyD,SAFxB,OAGjBhM,EAAKW,MAAQ,CACXwH,OAAQ,KACRK,QAAS,GACT3I,QAAS,GACTmM,SAAUA,EACVC,KAAM,IARSjM,mFAajB,IAAMyE,EAAQtE,KAAKJ,MAAM2I,QAAQ1E,IAAI,aAC/B2E,EAA8C,WAA7BC,OAAOnH,SAASoH,SAAwB,OAAS,MAClEC,EAASF,OAAOnH,SAAhBqH,KACFX,EAAS,IAAIY,UAAJ,GAAA3F,OAAiBuF,EAAjB,MAAAvF,OAAoC0F,EAApC,aACTE,EAAO7I,KACXgI,EAAOc,OAAS,SAAAzI,GACd0I,QAAQC,IAAI,yBAEdhB,EAAOiB,UAAY,SAAwB5I,GACzC0I,QAAQC,IAAR,sBAAA/F,OAAkC5C,EAAEhB,OACpC,IAAIA,EAAOkD,KAAKlB,MAAMhB,EAAEhB,MACxB,GACiB,YAAdA,EAAKf,MACJe,EAAK0M,OAASlD,EAAKrI,MAAMqL,UACzBxM,EAAKwC,KAAOgH,EAAKjJ,MAAMY,MAAMU,YAAYT,UAC5B,YAAdpB,EAAKf,MACJe,EAAK0M,OAASlD,EAAKjJ,MAAMY,MAAMU,YAAYT,UAC3CpB,EAAKwC,KAAOgH,EAAKrI,MAAMqL,SAEzBhD,EAAKjI,SAAS,SAAAsI,GAAS,MAAK,CAC1Bb,QAAO,GAAApF,OAAAnD,OAAAqJ,GAAA,EAAArJ,CAAMoJ,EAAUb,SAAhB,CAAyBhJ,EAAKA,eAElC,GACS,WAAdA,EAAKf,MACLe,EAAKA,KAAKoB,WAAaoI,EAAKrI,MAAMqL,UAClCxM,EAAKA,KAAKoB,WAAaoI,EAAKjJ,MAAMY,MAAMU,YAAYT,SACpD,CACA,IAAIqL,EAAOzM,EAAKA,KAChBwJ,EAAKjI,SAAS,CAAEkL,aAEF,YAAdzM,EAAKf,MACLe,EAAKA,KAAKoB,WAAaoI,EAAKrI,MAAMqL,UAClCxM,EAAKA,KAAKoB,WAAaoI,EAAKjJ,MAAMY,MAAMU,YAAYT,UAEpDoI,EAAKjI,SAAS,CAAEkL,KAAM,MAG1B9D,EAAOqB,QAAU,SAAA7J,GACfuJ,QAAQC,IAAR,0CACAD,QAAQ/F,MAAMxD,IAEhBwI,EAAOsB,QAAU,SAAAjJ,GACf0I,QAAQC,IAAI,0BAEdhJ,KAAKY,SAAS,CAAEoH,WAChBjJ,IACG8E,IADH,2BACmC,CAC/B5E,QAAS,CAAEsK,cAAa,SAAAtG,OAAWqB,MAEpCnF,KAAK,SAAAqK,GACJ,IAAMC,EAAS,GADJC,GAAA,EAAAC,GAAA,EAAAC,OAAAxF,EAAA,IAEX,QAAAyF,EAAAC,EAAgBN,EAAInK,KAApB0K,OAAAC,cAAAN,GAAAG,EAAAC,EAAA3I,QAAA8I,MAAAP,GAAA,EAA0B,KAAjBrD,EAAiBwD,EAAA7I,MACxByI,EAAOvD,KAAK,CACVqB,IAAKlB,EAAG,GACR3G,QAAS2G,EAAG,KACZ5F,SAAU4F,EAAG,YACb6D,QAAS7D,EAAG,cAPL,MAAA7G,GAAAmK,GAAA,EAAAC,EAAApK,EAAA,YAAAkK,GAAA,MAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GAUXf,EAAKjI,SAAS,SAAAsI,GAAS,MAAK,CAC1Bb,QAAO,GAAApF,OAAAnD,OAAAqJ,GAAA,EAAArJ,CAAMoJ,EAAUb,SAAYoB,QAGtClK,MAAM,SAAAC,GAEDA,EAAIJ,UAAoC,MAAxBI,EAAIJ,SAASf,QAC/B0K,QAAQC,IAAIxJ,EAAIJ,SAASK,WAAYD,EAAIJ,SAASgL,kDA0BjD,IAAAC,EAAArK,KACDsK,EAAUtK,KAAKQ,MAAM6H,QAC3B,OACE7G,EAAAC,EAAAC,cAAC+E,EAAA,QAAD,CAAS1E,UAAU,0BACjBP,EAAAC,EAAAC,cAACgF,EAAA,UAAD,CAAW3E,UAAU,UACnBP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,wBACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,yGAAf,2BAC2B/B,KAAKQ,MAAMqL,UAEtCrK,EAAAC,EAAAC,cAAA,OAAKK,UAAU,6GACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,2GACZuI,EAAQC,IAAI,SAAA7K,GAAO,OAClB8B,EAAAC,EAAAC,cAAA,OAAK6F,IAAK7H,EAAQ6H,IAAKxF,UAAU,OAC/BP,EAAAC,EAAAC,cAAA,QAAMK,UAAU,sCACbrC,EAAQe,WAAa4J,EAAKzK,MAAMY,MAAMU,YAAYT,SAAW,MAAQf,EAAQe,SADhF,KAC4F,KAE5Fe,EAAAC,EAAAC,cAAA,QAAMK,UAAU,gCAAgCrC,EAAQA,aAI9D8B,EAAAC,EAAAC,cAAA,OAAKK,UAAU,4CACbP,EAAAC,EAAAC,cAAA,QAAMK,UAAU,gCAAhB,gBACCjC,OAAOkM,QAAQhM,KAAKQ,MAAMsL,MAAM3H,OAAS,GACxC3C,EAAAC,EAAAC,cAAA,MAAIK,UAAW,QACbP,EAAAC,EAAAC,cAAA,QACEK,UACE,mCAC4B,YAA3B/B,KAAKQ,MAAMsL,KAAKzN,OAAuB,aAAe,kBAG3DmD,EAAAC,EAAAC,cAAA,MACEK,UAAU,oDACVyI,eAAA,gBAAAvH,OAA8BjD,KAAKQ,MAAMsL,KAAKrB,YAE7CzK,KAAKQ,MAAMsL,KAAKrL,aAM3Be,EAAAC,EAAAC,cAACgF,EAAA,UAAD,CAAW3E,UAAU,QACnBP,EAAAC,EAAAC,cAACgJ,GAAA,MAAD,KACElJ,EAAAC,EAAAC,cAACiJ,GAAA,SAAD,CACEC,OAAQ,SACR1I,YAAY,gBACZvB,SAAU,SAAAN,GACR,IAAIgG,EAAMhG,EAAES,OAAOE,MACnBqJ,EAAKzJ,SAAS,SAAA0F,GAAC,MAAK,CAClB5G,QAAS2G,MAGbQ,UAAW7G,KAAKuG,eAChBxE,UAAU,6IACVf,MAAOhB,KAAKQ,MAAMd,WAGtB8B,EAAAC,EAAAC,cAACgJ,GAAA,MAAD,KACElJ,EAAAC,EAAAC,cAACmJ,GAAA,QAAD,KACErJ,EAAAC,EAAAC,cAACoF,EAAA,OAAD,CAAQ1E,QAAQ,UAAU2E,QAAS/G,KAAK+H,aACtCvG,EAAAC,EAAAC,cAAA,QAAMK,UAAU,iBAAhB,0BArKFM,aAqLHC,eACb,KACA,CAAEQ,UAFWR,CAGb2E,GAAa2E,KCnLTK,GAAU,CAEZC,SAAUC,IAAUC,cACpBC,QAAS,IACTC,OAAQ,OAERC,WAAYC,IAAYC,OAGtBC,GAAgB,SAAC9M,GACrB,OACE4B,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACiL,EAAD,MACAnL,EAAAC,EAAAC,cAACkL,EAAD,MACApL,EAAAC,EAAAC,cAACmL,GAAWjN,KAKZkN,GAAe,SAAClN,GAClB,OACI4B,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAACiL,EAAD,MACAnL,EAAAC,EAAAC,cAACkL,EAAD,MACApL,EAAAC,EAAAC,cAACqL,EAAUnN,KAKjBoN,GAAc,SAACpN,GACnB,OACE4B,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACkL,EAAD,MACApL,EAAAC,EAAAC,cAACuL,GAASrN,KAKVsN,GAAa,SAACtN,GAClB,OACE4B,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACkL,EAAD,MACApL,EAAAC,EAAAC,cAACyL,GAAQvN,KA4BAwN,oLArBP,OACI5L,EAAAC,EAAAC,cAAC2L,EAAA,EAAD,CAAUjI,MAAOA,GACb5D,EAAAC,EAAAC,cAAC4L,EAAA,EAAD,KACE9L,EAAAC,EAAAC,cAAC6L,EAAA,EAADzN,OAAA0N,OAAA,CAAeC,SAAUC,KAAmBzB,IACxCzK,EAAAC,EAAAC,cAACiM,EAAA,EAAD,CAAeC,SAAU5G,IACrBxF,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAO4C,KAAM,IAAKqJ,OAAK,EAACC,UAAWjI,IACrCrE,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAO4C,KAAM,UAAWsJ,UAAWpB,KACnClL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAO4C,KAAM,SAAUsJ,UAAWhB,KAClCtL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAO4C,KAAM,QAASqJ,OAAK,EAACC,UAAWhI,IACvCtE,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAO4C,KAAM,kBAAmBsJ,UAAWd,KAC3CxL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAO4C,KAAM,iBAAkBsJ,UAAWZ,iBAbpD7K,oBCrDE0L,QACW,cAA7BtF,OAAOnH,SAAS0M,UAEe,UAA7BvF,OAAOnH,SAAS0M,UAEhBvF,OAAOnH,SAAS0M,SAAS7F,MACvB,gFCRF8F,EAAMC,OAAOC,8CAAYC,sBAAsBC,UAGnD,IAAMC,GAAcC,SAASC,eAAe,QAE5CC,IAASC,OAAOlN,EAAAC,EAAAC,cAACiN,GAAD,MAASL,IDkHnB,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAM3P,KAAK,SAAA4P,GACjCA,EAAaC","file":"static/js/main.71cf2c9d.chunk.js","sourcesContent":["export const createErrors = (msg_type, msg, status) => {\n    return { type: msg_type, payload: { msg, status } };\n};\n\nexport const createMessages = (msg_type, msg) => {\n    return { type: msg_type, payload: { msg } };\n};\n","import axios from \"axios\";\nimport * as types from \"./types\";\nimport { createErrors, createMessages } from \"./error.actions\";\n\nexport const makeHttpCall = (url, body, successMsg, action_type, dispatch) => {\n  const config = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    };\n  axios\n        .post(url, body, config)\n        .then((response) => {\n            // console.log(response);\n            dispatch({\n                type: types.HTTP_CALL_COMPLETED,\n            });\n            dispatch({\n                type: action_type,\n                payload: response.data,\n            });\n            dispatch(\n                createMessages(types.MESSAGE, {\n                    loginSuccess: successMsg,\n                }),\n            );\n        })\n        .catch((err) => {\n            dispatch({\n                type: types.HTTP_CALL_COMPLETED,\n            });\n            if(err.response) {\n                return dispatch(\n                  createErrors(\n                    types.ERROR,\n                    err.response.data,\n                    err.response.status,\n                  ),\n                );\n            }\n            if(err.status && err.statusText) {\n              return dispatch(\n                    createErrors(types.ERROR, err.statusText, err.status),\n                );\n            }\n            return dispatch(createErrors(types.ERROR, err.message, 500));\n        })\n};\n","export const LOGIN = \"LOGIN\";\nexport const SIGNUP = \"SIGNUP\";\nexport const ERROR = \"ERROR\";\nexport const MESSAGE = \"MESSAGE\";\nexport const HTTP_CALL_INITIATED = \"HTTP_CALL_INITIATED\";\nexport const HTTP_CALL_COMPLETED = \"HTTP_CALL_COMPLETED\";\n","import queryString from 'query-string'\nimport React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { login } from \"../../actions/login.actions\";\nimport { Redirect } from \"react-router-dom\";\nimport {\n    Container,\n    Section,\n    Field,\n    Label,\n    Control,\n    Input,\n    Button,\n} from \"bloomer\";\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\",\n            password: \"\",\n        };\n    }\n\n    // componentDidMount() {\n    //     console.log(`Login component CDM : ${JSON.stringify(this.props)}`);\n    // }\n\n    // componentDidUpdate(prevProps, prevState, snapshot) {\n    //     console.log(`Login Component prevProps : ${JSON.stringify(prevProps)}`);\n    //     console.log(`Login Component prevState : ${JSON.stringify(prevState)}`);\n    //     console.log(`Login Component props : ${JSON.stringify(this.props)}`);\n    //     console.log(`Login Component state : ${JSON.stringify(this.state)}`);\n    // }\n\n    // componentWillUnmount() {\n    //     console.log(`Login component CWU : ${JSON.stringify(this.props)}`);\n    // }\n\n    submitLogin = (e) => {\n        e.preventDefault();\n        this.props.login(this.state.username, this.state.password);\n    };\n\n    onChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    };\n\n    render() {\n        const isAuthenticated = this.props.state.isAuthenticated && this.props.state.currentUser;\n        const queryParams = queryString.parse(this.props.location.search);\n        const next = queryParams.next;\n        return (\n            <Fragment>\n                {isAuthenticated ? (\n                    <Redirect to={next} />\n                ) : (\n                    <Section\n                        className={\n                            this.props.state.isLoading ? \"opacity-25\" : \"\"\n                        }\n                    >\n                        <Container>\n                            <form onSubmit={this.submitLogin}>\n                                <Field>\n                                    <Label>Username</Label>\n                                    <Control>\n                                        <Input\n                                            type=\"text\"\n                                            onChange={this.onChange}\n                                            name=\"username\"\n                                            placeholder=\"Enter username\"\n                                            required={true}\n                                        />\n                                    </Control>\n                                </Field>\n                                <Field>\n                                    <Label>Password</Label>\n                                    <Control>\n                                        <Input\n                                            type=\"password\"\n                                            onChange={this.onChange}\n                                            name=\"password\"\n                                            placeholder=\"Enter password\"\n                                            required={true}\n                                        />\n                                    </Control>\n                                </Field>\n                                <Field>\n                                    <Control>\n                                        <Button isColor=\"info\" type=\"submit\">\n                                            Submit\n                                        </Button>\n                                    </Control>\n                                </Field>\n                            </form>\n                        </Container>\n                    </Section>\n                )}\n            </Fragment>\n        );\n    }\n}\n\nLogin.propTypes = {\n    login: PropTypes.func.isRequired,\n    state: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n    state: state.login,\n});\nexport default connect(\n    mapStateToProps,\n    { login },\n)(Login);\n","import * as types from \"./types\";\nimport { makeHttpCall } from \"./action.utils\";\n\nexport const login = (username, password) => (dispatch) => {\n    const body = JSON.stringify({ username, password });\n    dispatch({\n        type: types.HTTP_CALL_INITIATED,\n    });\n    makeHttpCall(\"/api/auth/login/\", body, \"logged in successfully\", types.LOGIN, dispatch);\n};\n","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withAlert } from \"react-alert\";\nimport { connect } from \"react-redux\";\n\nclass Alerts extends Component {\n    componentDidUpdate(prevProps, _prevState) {\n        const { errors, alert, messages } = this.props;\n        if (errors !== prevProps.errors) {\n            if (errors.msg.name) alert.error(`Name: ${errors.msg.name.join()}`);\n            if (errors.msg.email)\n                alert.error(\n                    `${errors.status} : Email: ${errors.msg.email.join()}`,\n                );\n            if (errors.msg.non_field_errors)\n                alert.error(\n                    `${errors.status} : ${errors.msg.non_field_errors.join()}`,\n                );\n            if (errors.msg.username) alert.error(errors.msg.username.join());\n            if(errors.msg.emptyMessage) alert.error(errors.msg.emptyMessage);\n            if(errors.msg.genericError) alert.error(`${errors.msg.genericError}`);\n        }\n        if (messages !== prevProps.messages) {\n            if (messages.msg.loginSuccess) {\n                alert.success(messages.msg.loginSuccess);\n            }\n            if(messages.msg.genericMessage) {\n                alert.success(messages.msg.genericMessage);\n            }\n        }\n    }\n\n    render() {\n        return <Fragment />;\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    errors: state.errors,\n    messages: state.messages,\n});\n\nAlerts.propTypes = {\n    errors: PropTypes.object.isRequired,\n};\n\nexport default connect(mapStateToProps)(withAlert()(Alerts));\n","import * as types from \"../actions/types\";\nconst Cookies = require(\"js-cookie\");\n\nconst initialState = {\n    isAuthenticated: !!Cookies.get(\"authToken\"),\n    currentUser: JSON.parse(localStorage.getItem(\"currentUser\")),\n    isLoading: false,\n    signupSuccess: false,\n};\n\nconst loginSignupReducer = function(state = initialState, action) {\n    switch (action.type) {\n        case types.LOGIN:\n            let token = action.payload.token;\n            Cookies.set(\"authToken\", token, {path: \"/\", expires: new Date(action.payload.expiry)});\n            localStorage.setItem(\"currentUser\", JSON.stringify(action.payload.user));\n            return {\n                ...state,\n                isAuthenticated: true,\n                currentUser: action.payload.user\n            };\n        case types.SIGNUP:\n            return {\n                ...state,\n                signupSuccess: !state.signupSuccess\n            };\n        case types.HTTP_CALL_INITIATED:\n            return {\n                ...state,\n                isLoading: true,\n            };\n        case types.HTTP_CALL_COMPLETED:\n            return {\n                ...state,\n                isLoading: false,\n            };\n        default:\n            return state;\n    }\n};\nexport default loginSignupReducer;\n","import * as types from \"../actions/types\";\n\nconst initialState = {\n    msg: {},\n    status: \"\",\n};\nconst errorReducer = (state = initialState, action) => {\n    if (action.type === types.ERROR) {\n        return { msg: action.payload.msg, status: action.payload.status };\n    }\n    return state;\n};\nexport default errorReducer;\n","import * as types from \"../actions/types\";\n\nconst initialState = {\n    msg: {},\n};\nconst messageReducer = (state = initialState, action) => {\n    if (action.type === types.MESSAGE) {\n        return (state = action.payload);\n    }\n    return state;\n};\nexport default messageReducer;\n","import { combineReducers } from \"redux\";\nimport login from \"./login.reducer\";\nimport errors from \"./error.reducer\";\nimport messages from \"./message.reducer\";\n\nexport default combineReducers({ login, errors, messages });\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\n\nconst middleware = [thunk];\n\nconst initialState = {};\nconst store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware)),\n);\n\nexport default store;\n","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nclass Spinner extends Component {\n    render() {\n        return (\n            <Fragment>\n                {this.props.isLoading && (\n                    <div className=\"spinner\">\n                        <img src=\"assets/spinner.gif\" alt=\"loading\" />\n                    </div>\n                )}\n            </Fragment>\n        );\n    }\n}\n\nSpinner.propTypes = {\n    isLoading: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    isLoading: state.login.isLoading,\n});\n\nexport default connect(mapStateToProps)(Spinner);\n","import React, { Component } from \"react\";\n\nclass Home extends Component {\n    // componentDidMount() {\n    //     console.log(`Home component CDM : ${JSON.stringify(this.props)}`);\n    // }\n\n    // componentWillUnmount() {\n    //     console.log(`Home component CWU : ${JSON.stringify(this.props)}`);\n    // }\n    render() {\n        return <div>Home Page</div>;\n    }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { Section } from \"bloomer/lib/layout/Section\";\nimport { Container } from \"bloomer/lib/layout/Container\";\nimport { Input } from \"bloomer/lib/elements/Form/Input\";\nimport { Label } from \"bloomer/lib/elements/Form/Label\";\nimport \"./RoomEnter.scss\";\nimport { Button } from \"bloomer/lib/elements/Button\";\n\nclass RoomEnter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      roomName: \"\",\n    };\n  }\n\n  enterRoom = event => {\n    event.preventDefault();\n    this.props.history.push(\"/room/\" + this.state.roomName);\n  };\n\n  roomNameChange = event => {\n    let val = event.target.value;\n    this.setState(_ => ({ roomName: val }));\n  };\n\n  keyDownHandler = event => {\n    if (event.keyCode === 13) {\n      this.enterRoom(event);\n    }\n  };\n\n  render() {\n    return (\n      <Section className=\"room_enter__section\">\n        <Container className=\"room__container\">\n          <Label className=\"room__label\">Enter a room name:</Label>\n          <Input\n            type={\"text\"}\n            className=\"room__input\"\n            onChange={this.roomNameChange}\n            onKeyDown={this.keyDownHandler}\n          />\n          <Button isColor={\"primary\"} className=\"large__btn\" onClick={this.enterRoom}>\n            Enter\n          </Button>\n        </Container>\n      </Section>\n    );\n  }\n}\nexport default RoomEnter;\n","export const BASE_NAME = \"/app\";\n","import React, { Fragment } from \"react\";\nimport { instanceOf } from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { withCookies, Cookies } from 'react-cookie';\nimport { Redirect } from \"react-router-dom\";\nimport { trimBasename } from \"../../utils\";\n\nexport default function authRequired(WrappedComponent) {\n    const innerClass = class extends React.Component {\n        static propTypes = {\n            cookies: instanceOf(Cookies).isRequired\n        };\n        render() {\n            const isAuthenticated = this.props.state.isAuthenticated && this.props.state.currentUser;\n            return (\n                <Fragment>\n                    {!isAuthenticated ? (\n                        <Redirect to={`/login?next=${encodeURIComponent(trimBasename(this.props.location.pathname + this.props.location.search))}`} />\n                    ) : (\n                        <WrappedComponent {...this.props} />\n                    )}\n                </Fragment>\n            );\n        }\n    };\n\n    const mapStateToProps = (state) => ({\n        state: state.login,\n    });\n    return connect(\n        mapStateToProps,\n        null,\n    )(withCookies(innerClass));\n}\n","import {BASE_NAME} from \"./constants\";\n\n/*\ngiven the url trim the basename from it and return\nthe remaining url\n */\nexport function trimBasename(url) {\n  return url.split(BASE_NAME).join(\"\");\n}\n","import * as types from \"./types\";\nimport { createErrors, createMessages } from \"./error.actions\";\n\n\nexport const alert = (message_type, message, status=\"\") => (dispatch) => {\n    if(message_type === types.ERROR){\n      dispatch(createErrors(types.ERROR, message, status))\n    }\n    dispatch(createMessages(types.MESSAGE, message));\n};\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport authRequired from \"../common/AuthLayer\";\nimport { Section } from \"bloomer/lib/layout/Section\";\nimport { Container } from \"bloomer/lib/layout/Container\";\nimport { Field } from \"bloomer/lib/elements/Form/Field/Field\";\nimport { Control } from \"bloomer/lib/elements/Form/Control\";\nimport { Button } from \"bloomer/lib/elements/Button\";\nimport \"./Room.scss\";\nimport { TextArea } from \"bloomer/lib/elements/Form/TextArea\";\nimport { connect } from \"react-redux\";\nimport { alert } from \"../../actions/message.actions\";\nimport PropTypes from \"prop-types\";\n\nclass Room extends Component {\n  constructor(props) {\n    super(props);\n    const roomName = this.props.match.params.roomName;\n    this.state = {\n      socket: null,\n      chatLog: [],\n      message: \"\",\n      roomName: roomName,\n      users: [],\n    };\n  }\n  componentDidMount() {\n    const token = this.props.cookies.get(\"authToken\");\n    const protocolPrefix = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    let { host } = window.location;\n    let socket = new WebSocket(`${protocolPrefix}//${host}/ws/chat/${this.state.roomName}/`);\n    let self = this;\n    socket.onopen = e => {\n      console.log(\"opened connection...\");\n    };\n    socket.onmessage = function receiveMessage(e) {\n      // console.log(`message received : ${e.data}`);\n      let data = JSON.parse(e.data);\n      if (data.type === \"INITIAL_STATUS\") {\n        self.setState({\n          users: data.data,\n        });\n      } else if (data.type === \"MESSAGE\") {\n        self.setState(prevState => ({\n          chatLog: [...prevState.chatLog, data.data],\n        }));\n      } else if (data.type === \"ONLINE\") {\n        if (data.data.username !== self.props.state.currentUser.username) {\n          let users = self.state.users;\n          users = users.filter(val => val.username !== data.data.username);\n          users.push(data.data);\n          self.setState({ users });\n        }\n      } else if (data.type === \"OFFLINE\") {\n        if (data.data.username !== self.props.state.currentUser.username) {\n          let users = self.state.users;\n          users = users.filter(val => val.username !== data.data.username);\n          self.setState({ users });\n        }\n      }\n    };\n    socket.onerror = err => {\n      console.log(`socket connection closed unexcpectedly`);\n      console.error(err);\n    };\n    socket.onclose = e => {\n      console.log(\"closing connection...\");\n    };\n    this.setState({ socket });\n    axios\n      .get(`/api/message/room/${this.state.roomName}/`, {\n        headers: { Authorization: `Token ${token}` },\n      })\n      .then(res => {\n        const result = [];\n        for (let val of res.data) {\n          result.push({\n            key: val[\"id\"],\n            message: val[\"text\"],\n            username: val[\"sender_name\"],\n            created: val[\"created_on\"],\n          });\n        }\n        self.setState(prevState => ({\n          chatLog: [...prevState.chatLog, ...result],\n        }));\n      })\n      .catch(err => {\n        // console.log(`response: ${JSON.stringify(err.response)}`);\n        if (err.response && err.response.status !== 404) {\n          console.log(err.response.statusText, err.response.statusMessage);\n        }\n      });\n  }\n\n  sendMessage = e => {\n    e.preventDefault();\n    if (!this.state.message) {\n      this.props.alert(\"ERROR\", { emptyMessage: \"please enter a message\" });\n      return;\n    }\n    this.state.socket.send(\n      JSON.stringify({ message: this.state.message, room_name: this.state.roomName }),\n    );\n    this.setState(_ => ({ message: \"\" }));\n  };\n\n  keyDownHandler = event => {\n    if (event.keyCode === 13) {\n      this.sendMessage(event);\n    }\n  };\n\n  render() {\n    const chatlog = this.state.chatLog;\n    return (\n      <Section className=\"bg-purple-800 h-screen\">\n        <Container className=\"h-full\">\n          <div className=\"flex flex-col h-full\">\n            <div className=\"text-3xl text-center p-2 flex-auto room__name w-full border-solid border-2 border-white-500 flex-auto\">\n              Room Name : {this.props.match.params.roomName}\n            </div>\n            <div className=\"chat_log__flex flex-auto flex flex-row w-full border-solid border-2 border-t-0 border-white-500 flex-auto\">\n              <div className=\"chat_log w-10/12 p-2 border-solid border-r-2 border-white-500 flex-auto flex flex-col overflow-y-scroll\">\n                {chatlog.map(message => (\n                  <div key={message.key} className=\"p-1\">\n                    <span className=\"message__username has-text-primary\">\n                      {message.username === this.props.state.currentUser.username\n                        ? \"You\"\n                        : message.username}{\" \"}\n                      :{\" \"}\n                    </span>\n                    <span className=\"message__message break-words\">{message.message}</span>\n                  </div>\n                ))}\n              </div>\n              <div className=\"user_list w-2/12 flex-auto flex flex-col\">\n                <span className=\"has-text-primary text-center\">Online Users</span>\n                <ul>\n                  {this.state.users.map(user => (\n                    <div key={user.username} className={\"flex\"}>\n                      <span\n                        className={\n                          \"rounded-full h-3 w-3 mt-2 ml-3 \" +\n                          (user.status === \"OFFLINE\" ? \"bg-red-500\" : \"bg-green-500\")\n                        }\n                      />\n                      <li\n                        className=\"text-center has-text-info tooltip room__name ml-4\"\n                        data-tooltip={`Last Seen at ${user.last_seen}`}\n                      >\n                        {user.username}\n                      </li>\n                    </div>\n                  ))}\n                </ul>\n              </div>\n            </div>\n            <Container className=\"mt-4\">\n              <Field>\n                <TextArea\n                  isSize={\"medium\"}\n                  placeholder=\"Enter message\"\n                  onChange={e => {\n                    let val = e.target.value;\n                    this.setState(_ => ({\n                      message: val,\n                    }));\n                  }}\n                  onKeyDown={this.keyDownHandler}\n                  className=\"resize-none shadow rounded border max-w-sm py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\"\n                  value={this.state.message}\n                />\n              </Field>\n              <Field>\n                <Control>\n                  <Button isColor=\"primary\" onClick={this.sendMessage}>\n                    <span className=\"has-text-info\"> Submit </span>\n                  </Button>\n                </Control>\n              </Field>\n            </Container>\n          </div>\n        </Container>\n      </Section>\n    );\n  }\n}\n\nRoom.propTypes = {\n  alert: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { alert },\n)(authRequired(Room));\n","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Control, Field, Input, Label, Section, Button, Help } from \"bloomer\";\nimport { connect } from \"react-redux\";\nimport { signup } from \"../../actions/signup.actions\";\nimport { Redirect } from \"react-router\";\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      password: \"\",\n      password2: \"\",\n      first_name: \"\",\n      last_name: \"\",\n      security_question1: \"\",\n      security_question2: \"\",\n      security_answer1: \"\",\n      security_answer2: \"\",\n      formErrors: {},\n    };\n  }\n\n  onChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  submitSignup = (e) => {\n    e.preventDefault();\n    if (this.state.password !== this.state.password2) {\n      return this.setState({ formErrors: { passwordMismatch: \"Password and Confirm Password must match\" } });\n    }\n    return this.props.signup(this.state.username, this.state.password, this.state.first_name,\n      this.state.last_name, this.state.security_question1, this.state.security_answer1, this.state.security_question2, this.state.security_answer2);\n  };\n\n\n  render() {\n    const isSignupSuccess = this.props.state.signupSuccess;\n    const isAuthenticated = this.props.state.isAuthenticated;\n    const isPasswordMismatched = \"passwordMismatch\" in this.state.formErrors;\n    if(isAuthenticated) {\n        return <Redirect to={\"/\"} />\n    }\n    return (\n      <Fragment>\n        {isSignupSuccess ? (<Redirect to={\"/login/\"}/>) :\n          <Section\n            className={\n              this.props.state.isLoading ? \"opacity-25\" : \"\"\n            }>\n            <form onSubmit={this.submitSignup}>\n              <Field>\n                <Label>Username</Label>\n                <Control>\n                  <Input\n                    type=\"text\"\n                    onChange={this.onChange}\n                    name=\"username\"\n                    placeholder=\"Enter username\"\n                    required={true}\n                  />\n                </Control>\n              </Field>\n              <Field>\n                <Label>Password</Label>\n                <Control>\n                  <Input\n                    type=\"password\"\n                    onChange={this.onChange}\n                    name=\"password\"\n                    placeholder=\"Enter password\"\n                    required={true}\n                  />\n                </Control>\n              </Field>\n              <Field>\n                <Label>Confirm Password</Label>\n                <Control>\n                  <Input\n                    type=\"password\"\n                    onChange={this.onChange}\n                    name=\"password2\"\n                    placeholder=\"Re-Enter password\"\n                    required={true}\n                    isColor={isPasswordMismatched ? \"danger\" : \"\"}\n                  />\n                </Control>\n                <Help className={isPasswordMismatched ? \"block\" : \"hidden\"}\n                      isColor={isPasswordMismatched ? \"danger\" : \"\"}>Password and Confirm Password\n                  must match</Help>\n              </Field>\n              <Field>\n                <Label>First Name</Label>\n                <Control>\n                  <Input\n                    type=\"text\"\n                    onChange={this.onChange}\n                    name=\"first_name\"\n                    placeholder=\"Enter First Name\"\n                    required={true}\n                  />\n                </Control>\n              </Field>\n              <Field>\n                <Label>Last Name</Label>\n                <Control>\n                  <Input\n                    type=\"text\"\n                    onChange={this.onChange}\n                    name=\"last_name\"\n                    placeholder=\"Enter Last Name\"\n                    required={true}\n                  />\n                </Control>\n              </Field>\n              <Field>\n                <Label>Security Question 1</Label>\n                <Control>\n                  <Input\n                    type=\"text\"\n                    onChange={this.onChange}\n                    name=\"security_question1\"\n                    placeholder=\"Enter Security Question\"\n                    required={true}\n                  />\n                </Control>\n                <Help isColor={\"info\"}>Since we are not taking your email, we recommend you\n                  to set\n                  security questions and remember the answers</Help>\n              </Field>\n              <Field>\n                <Label>Security Answer 1</Label>\n                <Control>\n                  <Input\n                    type=\"text\"\n                    onChange={this.onChange}\n                    name=\"security_answer1\"\n                    placeholder=\"Enter Answer\"\n                    required={true}\n                  />\n                </Control>\n              </Field>\n              <Field>\n                <Label>Security Question 2</Label>\n                <Control>\n                  <Input\n                    type=\"text\"\n                    onChange={this.onChange}\n                    name=\"security_question2\"\n                    placeholder=\"Enter Security Question\"\n                    required={true}\n                  />\n                </Control>\n              </Field>\n              <Field>\n                <Label>Security Answer 2</Label>\n                <Control>\n                  <Input\n                    type=\"text\"\n                    onChange={this.onChange}\n                    name=\"security_answer2\"\n                    placeholder=\"Enter Answer\"\n                    required={true}\n                  />\n                </Control>\n              </Field>\n              <Field>\n                <Control>\n                  <Button isColor=\"info\" type=\"submit\">\n                    Submit\n                  </Button>\n                </Control>\n              </Field>\n            </form>\n\n          </Section>\n        }\n      </Fragment>\n    );\n  }\n}\n\nSignup.propTypes = {\n  signup: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  state: state.login,\n});\n\nexport default connect(mapStateToProps, { signup })(Signup);\n","import * as types from \"./types\";\nimport { makeHttpCall } from \"./action.utils\";\n\nexport const signup = (username, password, first_name, last_name, security_question1, security_answer1, security_question2, security_answer2) => (dispatch) => {\n  const body = JSON.stringify({\n    username,\n    password,\n    first_name,\n    last_name,\n    security_question1,\n    security_answer1,\n    security_question2,\n    security_answer2,\n  });\n  dispatch({\n        type: types.HTTP_CALL_INITIATED,\n    });\n  makeHttpCall(\"/api/auth/register/\", body, \"signup successful. please login now\", types.SIGNUP, dispatch);\n};\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Section } from \"bloomer/lib/layout/Section\";\nimport { Container } from \"bloomer/lib/layout/Container\";\nimport { Field } from \"bloomer/lib/elements/Form/Field/Field\";\nimport { TextArea } from \"bloomer/lib/elements/Form/TextArea\";\nimport { Control } from \"bloomer/lib/elements/Form/Control\";\nimport { Button } from \"bloomer/lib/elements/Button\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { alert } from \"../../actions/message.actions\";\nimport authRequired from \"../common/AuthLayer\";\n\nclass P2P extends Component {\n  constructor(props) {\n    super(props);\n    const peerName = this.props.match.params.peerName;\n    this.state = {\n      socket: null,\n      chatLog: [],\n      message: \"\",\n      peerName: peerName,\n      peer: {},\n    };\n  }\n\n  componentDidMount() {\n    const token = this.props.cookies.get(\"authToken\");\n    const protocolPrefix = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    let { host } = window.location;\n    let socket = new WebSocket(`${protocolPrefix}//${host}/ws/p2p/`);\n    let self = this;\n    socket.onopen = e => {\n      console.log(\"opened connection...\");\n    };\n    socket.onmessage = function receiveMessage(e) {\n      console.log(`message received : ${e.data}`);\n      let data = JSON.parse(e.data);\n      if (\n        (data.type === \"MESSAGE\" &&\n          data.from === self.state.peerName &&\n          data.to === self.props.state.currentUser.username) ||\n        (data.type === \"MESSAGE\" &&\n          data.from === self.props.state.currentUser.username &&\n          data.to === self.state.peerName)\n      ) {\n        self.setState(prevState => ({\n          chatLog: [...prevState.chatLog, data.data],\n        }));\n      } else if (\n        data.type === \"ONLINE\" &&\n        data.data.username === self.state.peerName &&\n        data.data.username !== self.props.state.currentUser.username\n      ) {\n        let peer = data.data;\n        self.setState({ peer });\n      } else if (\n        data.type === \"OFFLINE\" &&\n        data.data.username === self.state.peerName &&\n        data.data.username !== self.props.state.currentUser.username\n      ) {\n        self.setState({ peer: {} });\n      }\n    };\n    socket.onerror = err => {\n      console.log(`socket connection closed unexcpectedly`);\n      console.error(err);\n    };\n    socket.onclose = e => {\n      console.log(\"closing connection...\");\n    };\n    this.setState({ socket });\n    axios\n      .get(`/api/message/room/inbox/`, {\n        headers: { Authorization: `Token ${token}` },\n      })\n      .then(res => {\n        const result = [];\n        for (let val of res.data) {\n          result.push({\n            key: val[\"id\"],\n            message: val[\"text\"],\n            username: val[\"sender_name\"],\n            created: val[\"created_on\"],\n          });\n        }\n        self.setState(prevState => ({\n          chatLog: [...prevState.chatLog, ...result],\n        }));\n      })\n      .catch(err => {\n        // console.log(`response: ${JSON.stringify(err.response)}`);\n        if (err.response && err.response.status !== 404) {\n          console.log(err.response.statusText, err.response.statusMessage);\n        }\n      });\n  }\n\n  sendMessage = e => {\n    e.preventDefault();\n    if (!this.state.message) {\n      this.props.alert(\"ERROR\", { emptyMessage: \"please enter a message\" });\n      return;\n    }\n    this.state.socket.send(\n      JSON.stringify({\n        message: this.state.message,\n        to: this.state.peerName,\n      }),\n    );\n    this.setState(_ => ({ message: \"\" }));\n  };\n\n  keyDownHandler = event => {\n    if (event.keyCode === 13) {\n      this.sendMessage(event);\n    }\n  };\n\n  render() {\n    const chatlog = this.state.chatLog;\n    return (\n      <Section className=\"bg-purple-800 h-screen\">\n        <Container className=\"h-full\">\n          <div className=\"flex flex-col h-full\">\n            <div className=\"text-3xl text-center p-2 flex-auto room__name w-full border-solid border-2 border-white-500 flex-auto\">\n              You are chatting with : {this.state.peerName}\n            </div>\n            <div className=\"chat_log__flex flex-auto flex flex-row w-full border-solid border-2 border-t-0 border-white-500 flex-auto\">\n              <div className=\"chat_log w-10/12 p-2 border-solid border-r-2 border-white-500 flex-auto flex flex-col overflow-y-scroll\">\n                {chatlog.map(message => (\n                  <div key={message.key} className=\"p-1\">\n                    <span className=\"message__username has-text-primary\">\n                      {message.username === this.props.state.currentUser.username ? \"You\" : message.username} :{\" \"}\n                    </span>\n                    <span className=\"message__message break-words\">{message.message}</span>\n                  </div>\n                ))}\n              </div>\n              <div className=\"user_list w-2/12 flex-auto flex flex-col\">\n                <span className=\"has-text-primary text-center\">Online Users</span>\n                {Object.entries(this.state.peer).length > 0 && (\n                  <ul className={\"flex\"}>\n                    <span\n                      className={\n                        \"rounded-full h-3 w-3 mt-2 ml-3 \" +\n                        (this.state.peer.status === \"OFFLINE\" ? \"bg-red-500\" : \"bg-green-500\")\n                      }\n                    />\n                    <li\n                      className=\"text-center has-text-info tooltip room__name ml-4\"\n                      data-tooltip={`Last Seen at ${this.state.peer.last_seen}`}\n                    >\n                      {this.state.peer.username}\n                    </li>\n                  </ul>\n                )}\n              </div>\n            </div>\n            <Container className=\"mt-4\">\n              <Field>\n                <TextArea\n                  isSize={\"medium\"}\n                  placeholder=\"Enter message\"\n                  onChange={e => {\n                    let val = e.target.value;\n                    this.setState(_ => ({\n                      message: val,\n                    }));\n                  }}\n                  onKeyDown={this.keyDownHandler}\n                  className=\"resize-none shadow rounded border max-w-sm py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\"\n                  value={this.state.message}\n                />\n              </Field>\n              <Field>\n                <Control>\n                  <Button isColor=\"primary\" onClick={this.sendMessage}>\n                    <span className=\"has-text-info\"> Submit </span>\n                  </Button>\n                </Control>\n              </Field>\n            </Container>\n          </div>\n        </Container>\n      </Section>\n    );\n  }\n}\n\nP2P.propTypes = {\n  alert: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { alert },\n)(authRequired(P2P));\n","import React, { Component, Fragment } from \"react\";\nimport Login from \"./components/Login/login\";\nimport { transitions, positions, Provider as AlertProvider } from \"react-alert\";\nimport AlertTemplate from \"react-alert-template-basic\";\nimport \"./App.scss\";\nimport Alerts from \"./components/common/Alerts\";\nimport { Provider } from \"react-redux\";\nimport { CookiesProvider } from 'react-cookie';\nimport store from \"./store\";\nimport Spinner from \"./components/common/Spinner\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Home from \"./components/Home/home\";\nimport RoomEnter from \"./components/RoomEnter/RoomEnter\";\nimport Room from \"./components/Room/Room\";\nimport {BASE_NAME} from \"./constants\";\nimport Signup from \"./components/Signup/signup\";\nimport P2P from \"./components/P2P/p2p\";\n\nconst options = {\n    // you can also just use 'bottom center'\n    position: positions.BOTTOM_CENTER,\n    timeout: 5000,\n    offset: \"30px\",\n    // you can also just use 'scale'\n    transition: transitions.SCALE,\n};\n\nconst WrappedSignup = (props) => {\n  return (\n    <Fragment>\n      <Spinner />\n      <Alerts />\n      <Signup {...props} />\n    </Fragment>\n  )\n};\n\nconst WrappedLogin = (props) => {\n    return (\n        <Fragment>\n            <Spinner />\n            <Alerts />\n            <Login {...props} />\n        </Fragment>\n    );\n};\n\nconst WrappedRoom = (props) => {\n  return (\n    <Fragment>\n      <Alerts/>\n      <Room {...props} />\n    </Fragment>\n  )\n};\n\nconst WrappedP2P = (props) => {\n  return (\n    <Fragment>\n      <Alerts />\n      <P2P {...props} />\n    </Fragment>\n  )\n};\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <CookiesProvider>\n                  <AlertProvider template={AlertTemplate} {...options}>\n                      <BrowserRouter basename={BASE_NAME}>\n                          <Switch>\n                              <Route path={\"/\"} exact component={Home} />\n                            <Route path={\"/signup\"} component={WrappedSignup} />\n                            <Route path={\"/login\"} component={WrappedLogin} />\n                            <Route path={\"/room\"} exact component={RoomEnter} />\n                            <Route path={\"/room/:roomName\"} component={WrappedRoom} />\n                            <Route path={\"/p2p/:peerName\"} component={WrappedP2P} />\n                          </Switch>\n                      </BrowserRouter>\n                  </AlertProvider>\n                </CookiesProvider>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./styles/tailwind.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport Raven from \"raven-js\";\n\nif (process.env.NODE_ENV === \"production\") {\n    Raven.config(process.env.REACT_APP_SENTRY_URL).install();\n}\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(<App />, rootElement);\nif (module.hot && process.env.NODE_ENV === \"development\") {\n    module.hot.accept(\"./App\", () => {\n        const NextRoot = require(\"./App\").default;\n        ReactDOM.render(<NextRoot />, rootElement);\n    });\n}\n\nserviceWorker.unregister();\n"],"sourceRoot":""}